import gmpy2
import hashlib
p = 190716027447646792844189733681358379327343061199369341384474902557309769682923254674220284045951117393868651638379541511185212421611653965460100979887725583476037189369599999668327299529542494009290049992057157747007152994025186591269943960410319186487203043168774653327128061548663247131284489765017
q = 930788704028200015275140127068138499329817310955
g = 220237156062724657086413463831954488565703875839368639153162645824259735475648417436812689270045835305613201869418328189101417845912386944695747737570415063979393239590022180767575736652824918336764694014421673518178065244519367602124516716571334763354973717129155502536345229391073998560517516716958
k = 209569583662944399958807472421680653
x = 914039385178649432938708047621093551813459555435
r = 568752653628483014849549142909331362115254788206
sdata1 = 427262976273228083221871998313131945010029561209591706262118913937489577133576413685540380226864
sdata2 = 835940898148680488372488685713345793755099380413493862399556052721366535745667186387858109315383
s1 = 618159893787048300752592802884467155388759696698
s2 = 659836539307844663175437862395252943516139307036
ds = s2 - s1
dm = sdata2 - sdata1
k = gmpy2.mul(dm, gmpy2.invert(ds, q))
k = gmpy2.f_mod(k, q)
tmp = gmpy2.mul(k, s1) - sdata1
x = tmp * gmpy2.invert(r, q)
x = gmpy2.f_mod(x, q)
print int(k)
print int(x)
def data_to_int(s):
	return int(s.encode('hex'), 16)
def SHA1(data):
	return data_to_int(hashlib.sha1(data).hexdigest())
def encrypt(data, p, q, g, x, k):
	r = pow(g, k, p) % q
	s = (gmpy2.invert(k, q) * (SHA1(data) + x * r)) % q
	return (r, s)
def getflag(data):
	print 1
	if data == "getflag":
		(r, s) = encrypt(data, p, q, g, x, k)
		flag = "hctf{" + str(s % r) + "}"
		print flag
getflag("getflag")